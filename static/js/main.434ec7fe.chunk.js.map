{"version":3,"sources":["enums/enums.ts","components/NewTodoForm/NewTodoForm.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosCounter/TodosCounter.tsx","components/TodosFilter/TodosFilter.tsx","components/ClearCompletedButton/ClearCompletedButton.tsx","components/ToggleAll/Toggle.tsx","TodoApp.tsx","index.tsx"],"names":["Filters","NewTodoForm","handleSubmit","useState","newTodoTitle","setNewTodoTitle","onSubmit","event","value","type","className","placeholder","onChange","target","TodoItem","todo","index","editTodoTitle","editCompletedStatus","isEditingMode","setIsEditingMode","title","editedTodoTitle","setEditedTodoTitle","initialEditingValue","setInitialEditingValue","editingInput","useRef","liClasses","classNames","completed","editing","checkboxIds","id","checked","htmlFor","onClick","preventDefault","onDoubleClick","setTimeout","current","focus","ref","onKeyDown","key","editTodoValue","onBlur","TodoList","items","map","item","TodosCounter","numberOfActiveTodos","todos","filter","length","TodosFilter","applyFilter","All","selectedFilter","setSelectedFilter","handleFilterChange","appliedFilter","href","Active","Completed","ClearCompletedButton","completedTodosLength","handleClearCompletedClick","clearButtonClasses","hidden","ToggleAll","toggleAllStatus","handleToggleAllClick","todoForSavingInLS","TodoApp","setTodos","setToggleAllStatus","currentFilter","setCurrentFilter","mainClasses","main","footerClasses","footer","handleWindowClose","todosStringForLS","JSON","stringify","localStorage","setItem","useEffect","todosStringFromLS","getItem","todosFromLS","parse","window","addEventListener","removeEventListener","prevTodos","Date","Toggle","prev","getVisibleTodos","newTitle","todoId","changedArray","newStatus","find","chosenFilter","getActive","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.434ec7fe.chunk.js","sourcesContent":["enum Filters {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport default Filters;\n","import React, { useState } from 'react';\n\nconst NewTodoForm: React.FC<NewTodoFormProps> = ({ handleSubmit }) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n\n  const createTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    handleSubmit(event, newTodoTitle);\n    setNewTodoTitle('');\n  };\n\n  return (\n    <form\n      onSubmit={createTodo}\n    >\n      <input\n        value={newTodoTitle}\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={(event) => setNewTodoTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default NewTodoForm;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\n\nconst TodoItem: React.FC<TodoItemProps> = ({\n  todo, index, editTodoTitle, editCompletedStatus,\n}) => {\n  const [isEditingMode, setIsEditingMode] = useState(false);\n  const [editedTodoTitle, setEditedTodoTitle] = useState(todo.title);\n  const [\n    initialEditingValue,\n    setInitialEditingValue,\n  ] = useState(editedTodoTitle);\n  const editingInput = useRef<HTMLInputElement>(null);\n\n  const liClasses = classNames({\n    completed: todo.completed && !isEditingMode,\n    editing: isEditingMode,\n  });\n\n  const checkboxIds = classNames({\n    [`toggle-view${index}`]: !todo.completed && !isEditingMode,\n    'toggle-completed': todo.completed && !isEditingMode,\n    'toggle-editing': isEditingMode,\n  });\n\n  const editTodoValue = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsEditingMode(false);\n      setEditedTodoTitle(todo.title);\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      if (initialEditingValue !== editedTodoTitle) {\n        setInitialEditingValue(editedTodoTitle);\n        editTodoTitle(editedTodoTitle, todo.id);\n      }\n\n      setIsEditingMode(false);\n    }\n  };\n\n  const handleTodoDoubleClick = () => {\n    setIsEditingMode(true);\n    setInitialEditingValue(editedTodoTitle);\n    setTimeout(() => {\n      editingInput.current?.focus();\n    }, 0);\n  };\n\n  const handleOnBlur = () => {\n    if (initialEditingValue !== editedTodoTitle) {\n      editTodoTitle(editedTodoTitle, todo.id);\n    }\n\n    setIsEditingMode(false);\n  };\n\n  return (\n    <li className={liClasses}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={checkboxIds}\n          onChange={() => editCompletedStatus(!todo.completed, todo.id)}\n          checked={todo.completed}\n        />\n        <label\n          htmlFor={checkboxIds}\n          onClick={(event) => event.preventDefault()}\n          onDoubleClick={handleTodoDoubleClick}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          data-cy=\"deleteTodo\"\n          className=\"destroy\"\n          onClick={() => editTodoTitle('', todo.id)}\n        />\n      </div>\n      <input\n        value={editedTodoTitle}\n        ref={editingInput}\n        type=\"text\"\n        className=\"edit\"\n        onChange={(event) => setEditedTodoTitle(event.target.value)}\n        onKeyDown={(event) => editTodoValue(event)}\n        onBlur={handleOnBlur}\n      />\n    </li>\n  );\n};\n\nexport default TodoItem;\n","// import React from 'react';\n\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList: React.FC<TodoListProps> = ({\n  items, editTodoTitle, editCompletedStatus,\n}) => {\n  return (\n    <ul className=\"todo-list\">\n      {\n        items.map((item, index) => (\n          <TodoItem\n            key={item.id}\n            todo={item}\n            index={index}\n            editTodoTitle={editTodoTitle}\n            editCompletedStatus={editCompletedStatus}\n          />\n        ))\n      }\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nconst TodosCounter: React.FC<TodosCounterProps> = ({ todos }) => {\n  const numberOfActiveTodos = todos\n    .filter(todo => todo.completed === false).length;\n\n  return (\n    <span data-cy=\"todosCounter\" className=\"todo-count\">\n      {`${numberOfActiveTodos} ${numberOfActiveTodos === 1 ? 'item' : 'items'} left`}\n    </span>\n\n  );\n};\n\nexport default TodosCounter;\n","import React, { useState } from 'react';\nimport Filters from '../../enums/enums';\n\nconst TodosFilter: React.FC<TodosFilterProps> = ({ applyFilter }) => {\n  const [selectedFilter, setSelectedFilter] = useState(Filters.All);\n\n  const handleFilterChange = (appliedFilter: Filters) => {\n    setSelectedFilter(appliedFilter);\n    applyFilter(appliedFilter);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={selectedFilter === Filters.All ? 'selected' : ''}\n          onClick={() => handleFilterChange(Filters.All)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={selectedFilter === Filters.Active ? 'selected' : ''}\n          onClick={() => handleFilterChange(Filters.Active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={selectedFilter === Filters.Completed ? 'selected' : ''}\n          onClick={() => handleFilterChange(Filters.Completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport classNames from 'classnames';\n\nconst ClearCompletedButton: React.FC<ClearCompletedProps> = ({\n  completedTodosLength,\n  handleClearCompletedClick,\n}) => {\n  const clearButtonClasses = classNames({\n    'clear-completed': true,\n    hidden: completedTodosLength === 0,\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={clearButtonClasses}\n      onClick={handleClearCompletedClick}\n    >\n      Clear completed\n    </button>\n  );\n};\n\nexport default ClearCompletedButton;\n","import React from 'react';\n\nconst ToggleAll: React.FC<ToggleAllProps> = ({\n  toggleAllStatus,\n  handleToggleAllClick,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      data-cy=\"toggleAll\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={toggleAllStatus}\n      onClick={handleToggleAllClick}\n    />\n    <label\n      htmlFor=\"toggle-all\"\n    >\n      Mark all as complete\n    </label>\n  </>\n);\n\nexport default ToggleAll;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport NewTodoForm from './components/NewTodoForm/NewTodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosCounter from './components/TodosCounter/TodosCounter';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\nimport ClearCompletedButton\n  from './components/ClearCompletedButton/ClearCompletedButton';\nimport ToggleAll from './components/ToggleAll/Toggle';\nimport Filters from './enums/enums';\n\nlet todoForSavingInLS: Todo[] = [];\n\nconst TodoApp: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [toggleAllStatus, setToggleAllStatus] = useState(false);\n  const [currentFilter, setCurrentFilter] = useState(Filters.All);\n\n  todoForSavingInLS = [...todos];\n\n  const mainClasses = classNames({\n    main: true,\n    hidden: todos.length === 0,\n  });\n\n  const footerClasses = classNames({\n    footer: true,\n    hidden: todos.length === 0,\n  });\n\n  const editTodoTitle = (newTitle: string, todoId: number) => {\n    const changedArray = todos\n      .map(todo => {\n        if (todo.id === todoId) {\n          return {\n            id: todo.id,\n            title: newTitle,\n            completed: todo.completed,\n          };\n        }\n\n        return todo;\n      });\n\n    setTodos(changedArray.filter(todo => todo.title !== ''));\n  };\n\n  const editCompletedStatus = (newStatus: boolean, todoId: number) => {\n    const changedArray = todos\n      .map(todo => {\n        if (todo.id === todoId) {\n          return {\n            id: todo.id,\n            title: todo.title,\n            completed: newStatus,\n          };\n        }\n\n        return todo;\n      });\n\n    const isAnyTodoActive = changedArray.find(todo => todo.completed === false);\n\n    if (!isAnyTodoActive) {\n      setToggleAllStatus(true);\n    }\n\n    if (toggleAllStatus) {\n      setToggleAllStatus(false);\n    }\n\n    setTodos(changedArray);\n  };\n\n  const handleToggleAllClick = () => {\n    setTodos(prevTodos => prevTodos.map(todo => {\n      return {\n        id: todo.id,\n        title: todo.title,\n        completed: !toggleAllStatus,\n      };\n    }));\n\n    setToggleAllStatus(prev => !prev);\n  };\n\n  const handleFormSubmit\n    = (event: React.FormEvent<HTMLFormElement>, newTodoTitle: string) => {\n      event.preventDefault();\n      if (!newTodoTitle) {\n        return;\n      }\n\n      setTodos(prevTodos => [...prevTodos,\n        {\n          id: +new Date(),\n          title: newTodoTitle,\n          completed: false,\n        }]);\n    };\n\n  const applyFilter = (chosenFilter: string) => {\n    switch (chosenFilter) {\n      case Filters.Active:\n        setCurrentFilter(Filters.Active);\n        break;\n      case Filters.Completed:\n        setCurrentFilter(Filters.Completed);\n        break;\n      default:\n        setCurrentFilter(Filters.All);\n    }\n  };\n\n  const getVisibleTodos = () => {\n    switch (currentFilter) {\n      case Filters.Active:\n        return todos.filter(todo => todo.completed === false);\n      case Filters.Completed:\n        return todos.filter(todo => todo.completed === true);\n      default:\n        return todos;\n    }\n  };\n\n  const getActive = () => {\n    const changedArray = todos.filter(todo => !todo.completed);\n\n    setTodos(changedArray);\n\n    return changedArray.length;\n  };\n\n  const handleClearCompletedClick = () => {\n    const numberOfActiveTodos = getActive();\n\n    if (numberOfActiveTodos === 0) {\n      setToggleAllStatus(prev => !prev);\n    }\n  };\n\n  const getCompletedTodosLength = () => {\n    return todos.filter(todo => todo.completed).length;\n  };\n\n  const handleWindowClose = () => {\n    const todosStringForLS = JSON.stringify(todoForSavingInLS);\n\n    localStorage.setItem('todos', todosStringForLS);\n  };\n\n  useEffect(() => {\n    const todosStringFromLS = localStorage.getItem('todos') || '';\n    let todosFromLS: Todo[] = [];\n\n    if (todosStringFromLS) {\n      todosFromLS = JSON.parse(todosStringFromLS);\n    }\n\n    if (todosFromLS.length > 0) {\n      setTodos([...todosFromLS]);\n\n      const numberOfActiveTodos = todosFromLS\n        .filter(todo => !todo.completed).length;\n\n      if (numberOfActiveTodos === 0) {\n        setToggleAllStatus(true);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('beforeunload',\n      handleWindowClose);\n\n    return () => {\n      window.removeEventListener('beforeunload',\n        handleWindowClose);\n    };\n  }, []);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <NewTodoForm\n          data-cy=\"createTodo\"\n          handleSubmit={handleFormSubmit}\n        />\n      </header>\n\n      <section className={mainClasses}>\n        <ToggleAll\n          toggleAllStatus={toggleAllStatus}\n          handleToggleAllClick={handleToggleAllClick}\n        />\n\n        <TodoList\n          data-cy=\"todoList\"\n          items={getVisibleTodos()}\n          editTodoTitle={editTodoTitle}\n          editCompletedStatus={editCompletedStatus}\n        />\n      </section>\n\n      <footer className={footerClasses}>\n        <TodosCounter\n          data-cy=\"todosCounter\"\n          todos={todos}\n        />\n\n        <TodosFilter\n          applyFilter={applyFilter}\n        />\n\n        <ClearCompletedButton\n          completedTodosLength={getCompletedTodosLength()}\n          handleClearCompletedClick={handleClearCompletedClick}\n        />\n      </footer>\n    </section>\n  );\n};\n\nexport default TodoApp;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport './styles/todo-list.scss';\nimport './styles/filters.scss';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}